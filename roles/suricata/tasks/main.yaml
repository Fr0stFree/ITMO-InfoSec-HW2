---
- name: Create service group
  ansible.builtin.group:
    name: "{{ group }}"
    state: present
    system: yes

- name: Create service user
  ansible.builtin.user:
    name: "{{ user }}"
    state: present
    create_home: yes
    shell: /bin/bash

- name: Install required packages
  loop: 
    - software-properties-common
    - curl
    - jq
    - iptables-persistent
    - libnetfilter-queue1
    - libnfnetlink0
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present

- name: Run modprobe for br_netfilter
  ansible.builtin.shell: modprobe br_netfilter

- name: Set br_netfilter
  ansible.builtin.copy:
    dest: /etc/modules-load.d/br_netfilter.conf
    content: |
      br_netfilter

- name: Set sysctl parameters for bridge network filtering
  ansible.builtin.copy:
    dest: /etc/sysctl.d/99-bridge-nf.conf
    content: |
      net.bridge.bridge-nf-call-iptables=1
      net.bridge.bridge-nf-call-ip6tables=1

- name: Apply sysctl parameters
  ansible.builtin.command: sysctl -p /etc/sysctl.d/99-bridge-nf.conf

- name: Install Suricata
  ansible.builtin.apt:
    name: suricata
    state: latest
    update_cache: yes

- name: Copy Suricata rules
  ansible.builtin.copy:
    dest: /etc/suricata/rules/local.rules
    owner: "{{ user }}"
    mode: "0644"
    content: |
      drop icmp any any -> any any (msg:"[IPS] BLOCK ICMP"; sid:1000007; rev:1;)
      alert http any any -> any any (msg:"[IDS] HTTP Request Detected"; sid:100002; rev:1; flow:to_server; classtype:policy-violation;)
  
- name: Set Suricata configuration
  ansible.builtin.copy:
    src: config.yaml
    dest: /etc/suricata/suricata.yaml
    owner: "{{ user }}"
    mode: "0644"
  
- name: Remove existing iptables rule to avoid duplicates
  ansible.builtin.shell: iptables -D DOCKER-USER -j NFQUEUE --queue-num 1 --queue-bypass 2>/dev/null || true

- name: Insert iptables rule to forward packets to NFQUEUE
  ansible.builtin.shell: iptables -I DOCKER-USER -j NFQUEUE --queue-num 1 --queue-bypass

- name: Apply iptables rules persistently
  ansible.builtin.command: netfilter-persistent save

- name: Ensure suricata has required capabilities
  community.general.capabilities:
    path: /usr/bin/suricata
    capability: cap_net_admin,cap_net_raw+ep
    state: present

- name: Ensure directory for suricata.service exists
  ansible.builtin.file:
    path: /etc/systemd/system/suricata.service.d
    state: directory
    owner: "{{ user }}"
    mode: "0755"

- name: Create override file for suricata service
  ansible.builtin.copy:
    dest: /etc/systemd/system/suricata.service.d/override.conf
    owner: "{{ user }}"
    mode: "0644"
    content: |
      [Service]
      Type=simple
      ExecStart=
      ExecStart=/usr/bin/suricata -c /etc/suricata/suricata.yaml -q 1 --pidfile /run/suricata.pid -i eth0 -D

- name: Reload systemd to apply changes
  ansible.builtin.command: systemctl daemon-reload

- name: Run and enable Suricata service
  ansible.builtin.systemd:
    name: suricata
    state: started
    enabled: yes

- name: Verify Suricata is running
  ansible.builtin.shell: systemctl status suricata --no-pager
  register: suricata_status
  changed_when: false

- name: Display Suricata status
  ansible.builtin.debug:
    var: suricata_status.stdout_lines
